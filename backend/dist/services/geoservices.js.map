{"version":3,"sources":["../../src/services/geoservices.js"],"names":["googleMapsClient","googleMaps","createClient","key","process","env","GOOGLE_API","Promise","getDistanceFromLatLonInKm","point1","point2","R","dLat","deg2rad","lat","dLon","lng","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI","createDistanceGoogleMapsRequest","points","distanceConfigObj","origin","destination","length","waypoints","i","push","getCountryNameByReverseGeocoding","resolve","reject","reverseGeocode","latlng","result_type","asPromise","then","response","json","results","formatted_address","err","getCountryFromAddress","address","split","reverse","trim","extractHtmlInstruction","htmlInstruction","replace","roadSigns","match"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport \"dotenv/config\";\nimport googleMaps from \"@google/maps\";\nimport commandsPrior from '../data/default/commandsPrior'\n\nconst googleMapsClient = googleMaps.createClient({\n  key: process.env.GOOGLE_API,\n  Promise: Promise\n});\n\nexport function getDistanceFromLatLonInKm(point1, point2) {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(point2.lat - point1.lat); // deg2rad below\n  var dLon = deg2rad(point2.lng - point1.lng);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(point1.lat)) *\n      Math.cos(deg2rad(point2.lat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nexport function createDistanceGoogleMapsRequest(points) {\n  let distanceConfigObj = {\n    origin: `${points[0].lat},${points[0].lng}`,\n    destination: `${points[points.length - 1].lat},${points[points.length - 1].lng}`\n  };\n  if (points.length === 2) {\n    return distanceConfigObj;\n  } else {\n    distanceConfigObj.waypoints = [];\n    for (let i = 1; i < points.length - 1; i++) {\n      distanceConfigObj.waypoints.push(`${points[i].lat},${points[i].lng}`);\n    }\n    return distanceConfigObj;\n  }\n}\n\nexport function getCountryNameByReverseGeocoding(lat, lng) {\n  return new Promise((resolve, reject) => {\n    googleMapsClient\n      .reverseGeocode({ latlng: `${lat},${lng}`, result_type: \"country\" })\n      .asPromise()\n      .then(response => {\n        resolve(response.json.results[0].formatted_address);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n\nexport function getCountryFromAddress(address) {\n  address = address.split(\",\").reverse();\n  return address[0].trim();\n}\n\nexport function extractHtmlInstruction(htmlInstruction) {\n  htmlInstruction = htmlInstruction.replace(/<\\/?[^>]+(>|$)/g, \"\")\n  const roadSigns = htmlInstruction.match(/[a-z][0-9]+/gim);\n  return roadSigns;\n}\n"],"file":"geoservices.js"}