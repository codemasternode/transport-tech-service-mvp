{"version":3,"sources":["../../src/services/tollPayments.js"],"names":["countTollPayments","waypoints","countOneTollRoad","i","k","ex","value","extracted","steps","start_location","end_location","mainDirections","latitudeDifference","Math","abs","lat","longitudeDifference","lng","latitudeDirection","longitudeDirection","TollRoad","findOne","nameOfRoad","tollRoad","mainDirection","tollRoadPrepare","name","pricingPlans","m","route","length","g","paymentPoints","startPoint","endPoint","nearestDistance","number","location","mg","costsForWholeDistance","kl","cost","push","requirePropertyValue","costPerKm","tollRoads","tollCounts","distance","htmlInstruction","html_instructions","Promise","all"],"mappings":"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","sourcesContent":["import {getRoadCode} from './getRoadCode'\nimport TollRoad from '../models/tollRoads'\nimport {getDistanceFromLatLonInKm} from './geoservices'\n\nexport async function countTollPayments(waypoints) {\n    const tollRoads = [];\n    const tollCounts = []\n    async function countOneTollRoad(i, k, ex, value, waypoints, extracted) {\n        const { start_location, end_location } = waypoints[i].steps[k];\n        const mainDirections = {\n            latitudeDifference: Math.abs(\n                end_location.lat - start_location.lat\n            ),\n            longitudeDifference: Math.abs(\n                end_location.lng - start_location.lng\n            ),\n            latitudeDirection:\n                start_location.lat > end_location.lat\n                    ? \"SOUTH\"\n                    : start_location.lat === end_location.lat\n                        ? \"NONE\"\n                        : \"NORTH\",\n            longitudeDirection:\n                start_location.lng > end_location.lng\n                    ? \"WEST\"\n                    : start_location.lng === end_location.lng\n                        ? \"NONE\"\n                        : \"EAST\"\n        };\n        const tollRoad = await TollRoad.findOne({\n            nameOfRoad: extracted[ex]\n        });\n        let mainDirection = null;\n        if (tollRoad) {\n            let tollRoadPrepare = {\n                name: extracted[ex],\n                pricingPlans: []\n            };\n            for (let m = 0; m < tollRoad.route.length; m++) {\n                if (\n                    mainDirections.latitudeDirection ===\n                    tollRoad.route[m].mainDirection ||\n                    mainDirections.longitudeDirection ===\n                    tollRoad.route[m].mainDirection\n                ) {\n                    mainDirection = tollRoad.route[m];\n                    for (\n                        let g = 0;\n                        g < mainDirection.pricingPlans.length;\n                        g++\n                    ) {\n                        if (mainDirection.pricingPlans[g].paymentPoints) {\n                            const { paymentPoints } = mainDirection.pricingPlans[\n                                g\n                            ];\n                            let startPoint = null;\n                            let endPoint = null;\n                            let nearestDistance = {\n                                number: 0,\n                                value: getDistanceFromLatLonInKm(\n                                    paymentPoints[0].location,\n                                    end_location\n                                )\n                            };\n                            for (let mg = 0; mg < paymentPoints.length; mg++) {\n                                if (\n                                    getDistanceFromLatLonInKm(\n                                        paymentPoints[mg].location,\n                                        start_location\n                                    ) < nearestDistance.value\n                                ) {\n                                    nearestDistance = {\n                                        number: mg,\n                                        value: getDistanceFromLatLonInKm(\n                                            paymentPoints[mg].location,\n                                            start_location\n                                        )\n                                    };\n                                }\n                            }\n                            startPoint = nearestDistance.number;\n                            nearestDistance = {\n                                number: 0,\n                                value: getDistanceFromLatLonInKm(\n                                    paymentPoints[0].location,\n                                    end_location\n                                )\n                            };\n                            for (let mg = 0; mg < paymentPoints.length; mg++) {\n                                if (\n                                    getDistanceFromLatLonInKm(\n                                        paymentPoints[mg].location,\n                                        end_location\n                                    ) < nearestDistance.value\n                                ) {\n                                    nearestDistance = {\n                                        number: mg,\n                                        value: getDistanceFromLatLonInKm(\n                                            paymentPoints[mg].location,\n                                            end_location\n                                        )\n                                    };\n                                }\n                            }\n                            endPoint = nearestDistance.number;\n                            let costsForWholeDistance = 0;\n                            for (let kl = startPoint; kl <= endPoint; kl++) {\n                                costsForWholeDistance += paymentPoints[kl].cost;\n                            }\n                            tollRoadPrepare.pricingPlans.push({\n                                requirePropertyValue:\n                                    mainDirection.pricingPlans[g]\n                                        .requirePropertyValue,\n                                costsForWholeDistance\n                            });\n                        } else {\n                            //policz kilometrowo cenę\n                            tollRoadPrepare.pricingPlans.push({\n                                requirePropertyValue:\n                                    mainDirection.pricingPlans[g]\n                                        .requirePropertyValue,\n                                costsForWholeDistance:\n                                    (value *\n                                        mainDirection.pricingPlans[g].costPerKm) /\n                                    1000\n                            });\n                        }\n                    }\n                }\n            }\n            tollRoads.push(tollRoadPrepare);\n        }\n    }\n    for (let i = 0; i < waypoints.length; i++) {\n        for (let k = 0; k < waypoints[i].steps.length; k++) {\n            const {\n                distance: { value }\n            } = waypoints[i].steps[k];\n            if (value > 1000) {\n                const htmlInstruction = waypoints[i].steps[k].html_instructions;\n                const extracted = getRoadCode(htmlInstruction);\n                if (\n                    extracted\n                ) {\n                    for (let ex = 0; ex < extracted.length; ex++) {\n                        tollCounts.push(countOneTollRoad(i, k, ex, value, waypoints, extracted))\n                    }\n                }\n            }\n        }\n    }\n    await Promise.all(tollCounts)\n    return tollRoads;\n}"],"file":"tollPayments.js"}