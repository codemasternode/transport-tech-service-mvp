{"version":3,"sources":["../../src/services/countRoadDiets.js"],"names":["countRoadDiets","waypoints","time","listOfCountries","scaleOfTime","sumDiets","dietsTo24Hours","from","to","value","dietsAbove24Hours","avaiableHoursPerDay","Diets","find","countryName","$in","dietsInCountries","fullTime","fullNumberOfDays","timeNeededCounter","ck","l","length","timeNeeded","duration","numberOfDays","country","c","i","dietValueInPLN","counter","isFull","mk","Math","floor"],"mappings":";;;;;;;AAAA;;;;;;;;SAEsBA,c;;;;;;;0BAAf,iBAA8BC,SAA9B,EAAyCC,IAAzC,EAA8CC,eAA9C;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,WADH,GACiB,GADjB;AAECC,YAAAA,QAFD,GAEY,CAFZ;AAGGC,YAAAA,cAHH,GAGoB,CACnB;AACIC,cAAAA,IAAI,EAAE,CADV;AAEIC,cAAAA,EAAE,EAAE,IAFR;AAGIC,cAAAA,KAAK,EAAE,IAAI;AAHf,aADmB,EAMnB;AACIF,cAAAA,IAAI,EAAE,IADV;AAEIC,cAAAA,EAAE,EAAE,GAFR;AAGIC,cAAAA,KAAK,EAAE,IAAI;AAHf,aANmB,EAWnB;AACIF,cAAAA,IAAI,EAAE,GADV;AAEIC,cAAAA,EAAE,EAAE,CAFR;AAGIC,cAAAA,KAAK,EAAE;AAHX,aAXmB,CAHpB;AAoBGC,YAAAA,iBApBH,GAoBuB,CACtB;AACIH,cAAAA,IAAI,EAAE,CADV;AAEIC,cAAAA,EAAE,EAAE,GAFR;AAGIC,cAAAA,KAAK,EAAE,IAAI;AAHf,aADsB,EAMtB;AACIF,cAAAA,IAAI,EAAE,GADV;AAEIC,cAAAA,EAAE,EAAE,CAFR;AAGIC,cAAAA,KAAK,EAAE;AAHX,aANsB,CApBvB;AAgCGE,YAAAA,mBAhCH,GAgCyB,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAhCzB;AAAA;AAAA,mBAiC4BC,kBAAMC,IAAN,CAAW;AACtCC,cAAAA,WAAW,EAAE;AACTC,gBAAAA,GAAG,EAAEZ;AADI;AADyB,aAAX,CAjC5B;;AAAA;AAiCGa,YAAAA,gBAjCH;AAsCCC,YAAAA,QAtCD,GAsCYf,IAAI,GAAGE,WAtCnB,EAsCgC;;AAC/Bc,YAAAA,gBAvCD,GAuCoB,CAvCpB;AAwCCC,YAAAA,iBAxCD,GAwCqB,CAxCrB;AAyCCC,YAAAA,EAzCD,GAyCM,CAzCN;;AA2CH,mBAAOD,iBAAiB,GAAGF,QAA3B,EAAqC;AACjC,kBAAIN,mBAAmB,CAACS,EAAE,GAAG,CAAN,CAAnB,GAA8BH,QAAQ,GAAGE,iBAA7C,EAAgE;AAC5DD,gBAAAA,gBAAgB,IAAI,CAACD,QAAQ,GAAGE,iBAAZ,IAAiC,EAArD;AACH,eAFD,MAEO;AACHD,gBAAAA,gBAAgB,IAAI,CAApB;AACH;;AACDC,cAAAA,iBAAiB,IAAIR,mBAAmB,CAACS,EAAE,GAAG,CAAN,CAAxC;;AACA,kBAAIA,EAAE,IAAI,CAAN,IAAWA,EAAE,GAAG,CAAL,IAAU,CAAzB,EAA4B;AACxBF,gBAAAA,gBAAgB,IAAI,CAApB;AACH;;AACDE,cAAAA,EAAE;AACL;;AACD,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGpB,SAAS,CAACqB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACnCE,cAAAA,UADmC,GACrBtB,SAAS,CAACoB,CAAD,CAAT,CAAaG,QAAb,CAAsBf,KAAtB,GAA8B,EAA9B,GAAmC,EAApC,GAA0CL,WADpB,EACiC;;AACpEqB,cAAAA,YAFmC,GAEpB,CAFoB;AAGnCN,cAAAA,kBAHmC,GAGf,CAHe;AAInCC,cAAAA,GAJmC,GAI9B,CAJ8B;;AAMvC,qBAAOD,kBAAiB,GAAGI,UAA3B,EAAuC;AACnC,oBAAIZ,mBAAmB,CAACS,GAAE,GAAG,CAAN,CAAnB,GAA8BG,UAAU,GAAGJ,kBAA/C,EAAkE;AAC9DM,kBAAAA,YAAY,IAAI,CAACF,UAAU,GAAGJ,kBAAd,IAAmC,EAAnD;AACH,iBAFD,MAEO;AACHM,kBAAAA,YAAY,IAAI,CAAhB;AACH;;AACDN,gBAAAA,kBAAiB,IAAIR,mBAAmB,CAACS,GAAE,GAAG,CAAN,CAAxC;;AACA,oBAAIA,GAAE,IAAI,CAAN,IAAWA,GAAE,GAAG,CAAL,IAAU,CAAzB,EAA4B;AACxBK,kBAAAA,YAAY,IAAI,CAAhB;AACH;;AACDL,gBAAAA,GAAE;AACL;;AACGM,cAAAA,OAlBmC,GAkBzBvB,eAAe,CAACkB,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAlBU;;AAmBvC,mBAASM,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGX,gBAAgB,CAACM,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,oBAAID,OAAO,KAAKV,gBAAgB,CAACW,CAAD,CAAhB,CAAoBb,WAApC,EAAiD;AAC7CY,kBAAAA,OAAO,GAAGV,gBAAgB,CAACW,CAAD,CAA1B;AACH;AACJ;;AACD,kBAAIT,gBAAgB,GAAG,CAAvB,EAA0B;AACtB,qBAASU,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGtB,cAAc,CAACgB,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;AAC5C,sBACIH,YAAY,IAAInB,cAAc,CAACsB,CAAD,CAAd,CAAkBpB,EAAlC,IACAiB,YAAY,GAAGnB,cAAc,CAACsB,CAAD,CAAd,CAAkBrB,IAFrC,EAGE;AACEF,oBAAAA,QAAQ,IAAIC,cAAc,CAACsB,CAAD,CAAd,CAAkBnB,KAAlB,GAA0BiB,OAAO,CAACG,cAA9C;AACH;AACJ;AACJ,eATD,MASO;AACCC,gBAAAA,OADD,GACW,CADX;;AAEH,uBAAOL,YAAY,GAAGK,OAAtB,EAA+B;AACvBC,kBAAAA,MADuB,GACd,KADc;;AAE3B,uBAASC,EAAT,GAAc,CAAd,EAAiBA,EAAE,GAAGtB,iBAAiB,CAACY,MAAxC,EAAgDU,EAAE,EAAlD,EAAsD;AAClD,wBACI,CAACD,MAAD,IACArB,iBAAiB,CAACsB,EAAD,CAAjB,CAAsBxB,EAAtB,GAA2BsB,OAA3B,IAAsCL,YAF1C,EAGE;AACEM,sBAAAA,MAAM,GAAG,IAAT;AACA1B,sBAAAA,QAAQ,IACJqB,OAAO,CAACG,cAAR,GAAyBnB,iBAAiB,CAACsB,EAAD,CAAjB,CAAsBvB,KADnD;AAEAqB,sBAAAA,OAAO,IAAIpB,iBAAiB,CAACsB,EAAD,CAAjB,CAAsBxB,EAAjC;AACH;AACJ;;AACD,sBAAI,CAACuB,MAAL,EAAa;AACT1B,oBAAAA,QAAQ,IACJqB,OAAO,CAACG,cAAR,GACAnB,iBAAiB,CAACA,iBAAiB,CAACY,MAAlB,GAA2B,CAA5B,CAAjB,CAAgDb,KAFpD;AAGAqB,oBAAAA,OAAO,IAAIpB,iBAAiB,CAACA,iBAAiB,CAACY,MAAlB,GAA2B,CAA5B,CAAjB,CAAgDd,EAA3D;AACH;AACJ;;AACDH,gBAAAA,QAAQ,IAAI4B,IAAI,CAACC,KAAL,CAAWT,YAAX,IAA2BC,OAAO,CAACG,cAAnC,GAAoD,GAAhE;AACH;AACJ;;AAhHE,6CAiHI;AAAExB,cAAAA,QAAQ,EAARA,QAAF;AAAYa,cAAAA,gBAAgB,EAAhBA;AAAZ,aAjHJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Diets from \"../models/diets\";\n\nexport async function countRoadDiets(waypoints, time,listOfCountries) {\n    const scaleOfTime = 1.2;\n    let sumDiets = 0;\n    const dietsTo24Hours = [\n        {\n            from: 0,\n            to: 0.33,\n            value: 1 / 3\n        },\n        {\n            from: 0.33,\n            to: 0.5,\n            value: 1 / 2\n        },\n        {\n            from: 0.5,\n            to: 1,\n            value: 1\n        }\n    ];\n    const dietsAbove24Hours = [\n        {\n            from: 0,\n            to: 0.5,\n            value: 1 / 2\n        },\n        {\n            from: 0.5,\n            to: 1,\n            value: 1\n        }\n    ];\n    const avaiableHoursPerDay = [10, 10, 9, 9, 9, 9];\n    const dietsInCountries = await Diets.find({\n        countryName: {\n            $in: listOfCountries\n        }\n    });\n    let fullTime = time * scaleOfTime; //czas na dojazd w jednym kierunku\n    let fullNumberOfDays = 0;\n    let timeNeededCounter = 0;\n    let ck = 0;\n\n    while (timeNeededCounter < fullTime) {\n        if (avaiableHoursPerDay[ck % 6] > fullTime - timeNeededCounter) {\n            fullNumberOfDays += (fullTime - timeNeededCounter) / 24;\n        } else {\n            fullNumberOfDays += 1;\n        }\n        timeNeededCounter += avaiableHoursPerDay[ck % 6];\n        if (ck != 0 && ck % 6 == 0) {\n            fullNumberOfDays += 2;\n        }\n        ck++;\n    }\n    for (let l = 0; l < waypoints.length; l++) {\n        let timeNeeded = (waypoints[l].duration.value / 60 / 60) * scaleOfTime; //czas na dojazd w jednym kierunku\n        let numberOfDays = 0;\n        let timeNeededCounter = 0;\n        let ck = 0;\n\n        while (timeNeededCounter < timeNeeded) {\n            if (avaiableHoursPerDay[ck % 6] > timeNeeded - timeNeededCounter) {\n                numberOfDays += (timeNeeded - timeNeededCounter) / 24;\n            } else {\n                numberOfDays += 1;\n            }\n            timeNeededCounter += avaiableHoursPerDay[ck % 6];\n            if (ck != 0 && ck % 6 == 0) {\n                numberOfDays += 2;\n            }\n            ck++;\n        }\n        let country = listOfCountries[l * 2 + 1];\n        for (let c = 0; c < dietsInCountries.length; c++) {\n            if (country === dietsInCountries[c].countryName) {\n                country = dietsInCountries[c];\n            }\n        }\n        if (fullNumberOfDays < 1) {\n            for (let i = 0; i < dietsTo24Hours.length; i++) {\n                if (\n                    numberOfDays <= dietsTo24Hours[i].to &&\n                    numberOfDays > dietsTo24Hours[i].from\n                ) {\n                    sumDiets += dietsTo24Hours[i].value * country.dietValueInPLN;\n                }\n            }\n        } else {\n            let counter = 0;\n            while (numberOfDays > counter) {\n                let isFull = false;\n                for (let mk = 0; mk < dietsAbove24Hours.length; mk++) {\n                    if (\n                        !isFull &&\n                        dietsAbove24Hours[mk].to + counter >= numberOfDays\n                    ) {\n                        isFull = true;\n                        sumDiets +=\n                            country.dietValueInPLN * dietsAbove24Hours[mk].value;\n                        counter += dietsAbove24Hours[mk].to;\n                    }\n                }\n                if (!isFull) {\n                    sumDiets +=\n                        country.dietValueInPLN *\n                        dietsAbove24Hours[dietsAbove24Hours.length - 1].value;\n                    counter += dietsAbove24Hours[dietsAbove24Hours.length - 1].to;\n                }\n            }\n            sumDiets += Math.floor(numberOfDays) * country.dietValueInPLN * 1.5;\n        }\n    }\n    return { sumDiets, fullNumberOfDays };\n}"],"file":"countRoadDiets.js"}