{"version":3,"sources":["../../src/services/vehicleFilter.js"],"names":["costPallet","truck","palettes","capacity","costVolume","volume","vehicleFilterByPallet","trucks","weight","w","best_path","cost","forEach","max_pallets","Math","floor","min","i","j","prev_node","this_solution","best","answer","unshift","vehicleFilterByVolume","ceil","max_volume"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction costPallet(truck, palettes, capacity) {\n    return 1000 + (truck.palettes - palettes) + (truck.capacity - capacity);\n}\n\nfunction costVolume(truck, volume, capacity) {\n    return 1000 + (truck.volume - volume) + (truck.capacity - capacity);\n}\n\nexport function vehicleFilterByPallet(trucks, palettes, weight) {\n    var w = weight/palettes;\n\n    // To begin, we can carry nothing for no weight.\n    var best_path = [{cost: 0}];\n    trucks.forEach(function (truck) {   \n        var max_pallets = Math.floor((Math.min(truck.palettes, truck.capacity/w)));\n        // i is the number of pallets other trucks carry.\n        // We count down so that there is no chance the solution there\n        // has already used this truck.\n        for (var i = palettes-1; 0 <= i; i--) {\n            // j is the number of pallets that truck carries\n            for (var j = 1; j <= Math.min(max_pallets, palettes - i); j++) {\n                // Do we improve on i+j pallets by having truck carry i?\n                if (best_path[i] == null) {\n                    // Other trucks can't carry i\n                    continue;\n                }\n                let prev_node = best_path[i];\n                let this_solution = {\n                    truck: truck,\n                    palettes: j,\n                    cost: prev_node.cost + costPallet(truck, j, w*j),\n                    prev_node: prev_node\n                };\n                if (best_path[i+j] == null) {\n                    best_path[i+j] = this_solution;\n                }\n                else if (this_solution.cost < best_path[i+j].cost) {\n                    best_path[i+j] = this_solution;\n                }\n            }\n        }\n    });\n\n    // The answer is a linked list.  Let's decode it for convenience.\n    if (best_path[palettes] == null) {\n        return null;\n    }\n    else {\n        let best = best_path[palettes];\n        let answer = [];\n        while (best.truck != null) {\n            answer.unshift({\n                truck: best.truck,\n                palettes: best.palettes\n            });\n            best = best.prev_node;\n        }\n        return answer;\n    }\n}\n\nexport function vehicleFilterByVolume(trucks, volume, weight) {\n    volume = Math.ceil(volume)\n    var w = weight / volume;\n    // To begin, we can carry nothing for no weight.\n    var best_path = [{ cost: 0 }];\n    trucks.forEach(function (truck) {\n        var max_volume = Math.floor((Math.min(truck.volume, truck.capacity / w)));\n        // i is the number of volume other trucks carry.\n        // We count down so that there is no chance the solution there\n        // has already used this truck.\n        for (var i = volume - 1; 0 <= i; i--) {\n            // j is the number of volume that truck carries\n            for (var j = 1; j <= Math.min(max_volume, volume - i); j++) {\n                // Do we improve on i+j volume by having truck carry i?33\n                if (best_path[i] == null) {\n                    // Other trucks can't carry i\n                    continue;\n                }\n                let prev_node = best_path[i];\n                let this_solution = {\n                    truck: truck,\n                    volume: j,\n                    cost: prev_node.cost + costVolume(truck, j, w * j),\n                    prev_node: prev_node\n                };\n                if (best_path[i + j] == null) {\n                    best_path[i + j] = this_solution;\n                }\n                else if (this_solution.cost < best_path[i + j].cost) {\n                    best_path[i + j] = this_solution;\n                }\n            }\n        }\n    });\n\n    // The answer is a linked list.  Let's decode it for convenience.\n    if (best_path[volume] == null) {\n        return null;\n    }\n    else {\n        let best = best_path[volume];\n        let answer = [];\n        while (best.truck != null) {\n            answer.unshift({\n                truck: best.truck,\n                volume: best.volume\n            });\n            best = best.prev_node;\n        }\n        return answer;\n    }\n}\n\n"],"file":"vehicleFilter.js"}