{"version":3,"sources":["../../src/queries/volume.js"],"names":["cost","truck","pallets","capacity","optimize","trucks","weight","w","best_path","forEach","max_pallets","Math","floor","min","i","j","prev_node","this_solution","best","answer","unshift","name","console","log"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction cost (truck, pallets, capacity) {\n    return 1000 + (truck.pallets - pallets) + (truck.capacity - capacity);\n}\n\nfunction optimize (trucks, pallets, weight) {\n    var w = weight/pallets;\n\n    // To begin, we can carry nothing for no weight.\n    var best_path = [{cost: 0}];\n    trucks.forEach(function (truck) {\n        var max_pallets = Math.floor((Math.min(truck.pallets, truck.capacity/w)));\n        // i is the number of pallets other trucks carry.\n        // We count down so that there is no chance the solution there\n        // has already used this truck.\n        for (var i = max_pallets-1; 0 <= i; i--) {\n            // j is the number of pallets that truck carries\n            for (var j = 1; j <= Math.min(max_pallets, pallets - i); j++) {\n                // Do we improve on i+j pallets by having truck carry i?\n                if (best_path[i] == null) {\n                    // Other trucks can't carry i\n                    continue;\n                }\n                let prev_node = best_path[i];\n                let this_solution = {\n                    truck: truck,\n                    pallets: j,\n                    cost: prev_node.cost + cost(truck, j, w*j),\n                    prev_node: prev_node\n                };\n                if (best_path[i+j] == null) {\n                    best_path[i+j] = this_solution;\n                }\n                else if (this_solution.cost < best_path[i+j].cost) {\n                    best_path[i+j] = this_solution;\n                }\n            }\n        }\n    });\n\n\n    // The answer is a linked list.  Let's decode it for convenience.\n    if (best_path[pallets] == null) {\n        return null;\n    }\n    else {\n        let best = best_path[pallets];\n        let answer = [];\n        while (best.truck != null) {\n            answer.unshift({\n                truck: best.truck,\n                pallets: best.pallets\n            });\n            best = best.prev_node;\n        }\n        return answer;\n    }\n}\n\nconst trucks = [\n    {\n        name: \"Truck 1\",\n        pallets: 1.5,\n        capacity: 15\n    },\n    {\n        name: \"Truck 2\",\n        pallets: 1.2,\n        capacity: 10\n    },\n    {\n        name: \"Truck 3\",\n        pallets: 20,\n        capacity: 22\n    },\n    {\n        name: \"Truck 4\",\n        pallets: 24,\n        capacity: 12\n    }\n]\n\nconsole.log(optimize(trucks, 1, 1));"],"file":"volume.js"}