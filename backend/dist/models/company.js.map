{"version":3,"sources":["../../src/models/company.js"],"names":["CompanySchema","mongoose","Schema","logo","type","String","nameOfCompany","Types","required","name","minlength","maxlength","surname","phone","taxNumber","trim","isSuspended","Boolean","place","isVat","email","validate","validator","value","emailRegex","test","message","props","unique","endDateSubscription","Date","isPaid","createdAt","now","country","ObjectId","ref","countries","users","staticCosts","StaticCostSchema","workers","WorkerSchema","companyBases","Array","isConfirmed","plan","Object","sumKmPerMonth","Number","sumCostsPerMonth","statistics","strict","model"],"mappings":"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","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\nimport planTypes from \"../enums/planTypes\";\nimport StaticCostSchema from \"./staticCost\";\nimport CompanyBaseSchema from \"./companyBase\";\nimport WorkerSchema from \"./worker\";\nimport CountryModel from \"./country\";\n\nconst CompanySchema = new mongoose.Schema(\n  {\n    logo: {\n      type: String\n    },\n    nameOfCompany: {\n      type: Schema.Types.String,\n      required: [true, \"the company name can not be empty\"]\n    },\n    name: {\n      type: Schema.Types.String,\n      required: [true, \"name can not be empty\"],\n      minlength: 2,\n      maxlength: 50\n    },\n    surname: {\n      type: Schema.Types.String,\n      required: [true, \"surname can not be empty\"],\n      minlength: 2,\n      maxlength: 50\n    },\n    phone: {\n      type: Schema.Types.String,\n      required: true\n    },\n    taxNumber: {\n      type: Schema.Types.String,\n      required: [true, \"unique tax number can not be empty\"],\n      minlength: 6,\n      maxlength: 20,\n      trim: true\n    },\n    isSuspended: {\n      type: Schema.Types.Boolean,\n      required: [true, \"suspended can not be empty\"],\n      default: false\n    },\n    place: {\n      type: Schema.Types.String,\n      required: true\n    },\n    isVat: {\n      type: Schema.Types.Boolean,\n      required: true,\n      default: true\n    },\n    email: {\n      type: Schema.Types.String,\n      required: [true, \"email can not be empty\"],\n      validate: {\n        validator: function (value) {\n          const emailRegex = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n          return emailRegex.test(value);\n        },\n        message: props => `${props.value} is not a valid email`\n      },\n      maxlength: 50,\n      unique: true\n    },\n    endDateSubscription: {\n      type: Date\n    },\n    isPaid: {\n      type: Schema.Types.Boolean,\n      default: false,\n      required: true\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now()\n    },\n    country: {\n      type: Schema.Types.ObjectId,\n      ref: \"country\",\n      required: true\n    },\n    countries: [\n      {\n        type: String\n      }\n    ],\n    users: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"user\"\n      }\n    ],\n    staticCosts: [StaticCostSchema],\n    workers: [WorkerSchema],\n    companyBases: {\n      type: Array,\n      default: []\n    },\n    isConfirmed: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    plan: {\n      type: Object\n    },\n    sumKmPerMonth: {\n      type: Number,\n      default: 0\n    },\n    sumCostsPerMonth: {\n      type: Number,\n      default: 0\n    },\n    statistics: [Date]\n  },\n  { strict: false }\n);\n\nexport default mongoose.model(\"company\", CompanySchema);\n"],"file":"company.js"}