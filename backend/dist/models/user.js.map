{"version":3,"sources":["../../src/models/user.js"],"names":["UserSchema","mongoose","Schema","name","type","String","required","minlength","maxlength","lastname","password","email","unique","validate","validator","value","emailRegex","test","message","props","accountType","accountTypes","createdAt","Date","now","methods","comparePassword","candidatePassword","cb","bcrypt","compare","err","isMatch","pre","next","user","isModified","genSalt","salt","hash","model"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJC,IAAAA,SAAS,EAAE,CAHP;AAIJC,IAAAA,SAAS,EAAE;AAJP,GAD+B;AAOrCC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRC,IAAAA,SAAS,EAAE,CAHH;AAIRC,IAAAA,SAAS,EAAE;AAJH,GAP2B;AAarCE,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GAb2B;AAiBrCK,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLM,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAASC,KAAT,EAAgB;AACzB,YAAMC,UAAU,GAAG,sCAAnB;AACA,eAAOA,UAAU,CAACC,IAAX,CAAgBF,KAAhB,CAAP;AACD,OAJO;AAKRG,MAAAA,OAAO,EAAE,iBAAAC,KAAK;AAAA,yBAAOA,KAAK,CAACJ,KAAb;AAAA;AALN,KAJL;AAWLP,IAAAA,SAAS,EAAE;AAXN,GAjB8B;AA8BrCY,EAAAA,WAAW,EAAE;AACXhB,IAAAA,IAAI,EAAEC,MADK;AAEX,YAAMgB,wBAFK;AAGX,eAAS,MAHE;AAIXf,IAAAA,QAAQ,EAAE;AAJC,GA9BwB;AAoCrCgB,EAAAA,SAAS,EAAE;AACTlB,IAAAA,IAAI,EAAEmB,IADG;AAET,eAASA,IAAI,CAACC,GAAL;AAFA;AApC0B,CAApB,CAAnB;;AA0CAxB,UAAU,CAACyB,OAAX,CAAmBC,eAAnB,GAAqC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AACnEC,uBAAOC,OAAP,CAAeH,iBAAf,EAAkC,KAAKjB,QAAvC,EAAiD,UAASqB,GAAT,EAAcC,OAAd,EAAuB;AACpE,QAAID,GAAJ,EAAS,OAAOH,EAAE,CAACG,GAAD,CAAT;AACTH,IAAAA,EAAE,CAAC,IAAD,EAAOI,OAAP,CAAF;AACH,GAHD;AAID,CALD;;AAOAhC,UAAU,CAACiC,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAMC,IAAI,GAAG,IAAb;AAEA,MAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOF,IAAI,EAAX;;AAElCL,uBAAOQ,OAAP,CAAe,EAAf,EAAmB,UAASN,GAAT,EAAcO,IAAd,EAAoB;AACrC,QAAIP,GAAJ,EAAS,OAAOG,IAAI,CAACH,GAAD,CAAX;;AAETF,yBAAOU,IAAP,CAAYJ,IAAI,CAACzB,QAAjB,EAA2B4B,IAA3B,EAAiC,UAASP,GAAT,EAAcQ,IAAd,EAAoB;AACnD,UAAIR,GAAJ,EAAS,OAAOG,IAAI,CAACH,GAAD,CAAX;AAETI,MAAAA,IAAI,CAACzB,QAAL,GAAgB6B,IAAhB;AACAL,MAAAA,IAAI;AACL,KALD;AAMD,GATD;AAUD,CAfD;;eAiBejC,qBAASuC,KAAT,CAAe,MAAf,EAAuBxC,UAAvB,C","sourcesContent":["import mongoose from \"mongoose\";\nimport accountTypes from \"../enums/accountTypes\";\nimport bcrypt from \"bcryptjs\";\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    minlength: 2,\n    maxlength: 50\n  },\n  lastname: {\n    type: String,\n    required: true,\n    minlength: 2,\n    maxlength: 50\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: {\n      validator: function(value) {\n        const emailRegex = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,12})?$/;\n        return emailRegex.test(value);\n      },\n      message: props => `${props.value} is not a valid email`\n    },\n    maxlength: 50\n  },\n  accountType: {\n    type: String,\n    enum: accountTypes,\n    default: \"user\",\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now()\n  }\n});\n\nUserSchema.methods.comparePassword = function(candidatePassword, cb) {\n  bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {\n      if (err) return cb(err);\n      cb(null, isMatch);\n  });\n};\n\nUserSchema.pre(\"save\", function(next) {\n  const user = this;\n\n  if (!user.isModified(\"password\")) return next();\n\n  bcrypt.genSalt(10, function(err, salt) {\n    if (err) return next(err);\n\n    bcrypt.hash(user.password, salt, function(err, hash) {\n      if (err) return next(err);\n\n      user.password = hash;\n      next();\n    });\n  });\n});\n\nexport default mongoose.model(\"user\", UserSchema);\n"],"file":"user.js"}