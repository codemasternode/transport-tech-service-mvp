{"version":3,"sources":["../../src/controllers/road.js"],"names":["googleMapsClient","googleMaps","createClient","key","process","env","GOOGLE_API","Promise","getRoadOffers","req","res","body","typeOfSearch","getVehicles","operateOnCompanies","Companies","find","companies","distinctVehiclesInCompanies","i","length","com","nameOfCompany","_id","email","logo","isVat","place","phone","taxNumber","vehicles","k","companyBases","diffDistance","location","points","backDistance","m","isInside","g","toString","fullCost","toll","push","all","Vehicle","aggregate","$match","$gt","height","palette","$gte","distance","countries","$all","listOfCountries","$addFields","palettes","oneRow","$floor","$divide","$multiply","width","secondRow","$cond","$subtract","then","costPerKm","$sum","formattedCompanies","isNo","filter","value","splice","filtered","numberOfPallets","weight","map","index","truck","range","operationRange","requireKeys","status","send","msg","typeOfPallet","err","Palette","findOne","name","directions","asPromise","road","waypoints","json","routes","legs","time","duration","start_address","end_address","tollPayment","diets","l","pricingPlans","isIt","o","requirePropertyValue","currentRequireProperty","undefined","from","to","includes","costsForWholeDistance","sumDiets","Math","floor","fullNumberOfDays","salary","margin","volume"],"mappings":"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","sourcesContent":["import Vehicle from \"../models/vehicle\";\nimport Palette from \"../models/palletes\";\nimport Companies from \"../models/company\";\nimport { vehicleFilterByPallet, vehicleFilterByVolume } from '../services/vehicleFilter'\nimport googleMaps from \"@google/maps\";\nimport { getRoadCode } from '../services/getRoadCode'\nimport { countTollPayments } from '../services/tollPayments'\nimport { countRoadDiets } from '../services/countRoadDiets'\nimport \"dotenv/config\";\n\nimport {\n  createDistanceGoogleMapsRequest,\n  getCountryFromAddress,\n  getDistanceFromLatLonInKm,\n} from \"../services/geoservices\";\n\nconst googleMapsClient = googleMaps.createClient({\n  key: process.env.GOOGLE_API,\n  Promise: Promise\n});\n\nexport async function getRoadOffers(req, res) {\n  if (req.body.typeOfSearch === \"Palette\") {\n    const requireKeys = [\n      \"numberOfPallets\",\n      \"typeOfPallet\",\n      \"height\",\n      \"points\",\n      \"weight\"\n    ];\n    for (let i = 0; i < requireKeys.length; i++) {\n      let isInside = false;\n      for (let key in req.body) {\n        if (requireKeys[i] === key) {\n          isInside = true;\n        }\n      }\n      if (!isInside) {\n        return res.status(400).send({\n          msg: `Missing Parameter ${requireKeys[i]}`\n        });\n      }\n    }\n    const { points, numberOfPallets, typeOfPallet, height, weight } = req.body;\n    if (!points || points.length < 2) {\n      return res.status(400).send({\n        err: \"There is no points\"\n      });\n    }\n\n    const palette = await Palette.findOne({ name: typeOfPallet });\n    if (!palette) {\n      return res.status(400).send({\n        msg: `Can not find pallete ${typeOfPallet}`\n      });\n    }\n\n    const road = await googleMapsClient\n      .directions(createDistanceGoogleMapsRequest(points))\n      .asPromise();\n\n    const waypoints = road.json.routes[0].legs;\n    let distance = 0;\n    let time = 0;\n    const listOfCountries = [];\n    for (let i = 0; i < waypoints.length; i++) {\n      distance += waypoints[i].distance.value;\n      time += waypoints[i].duration.value;\n      listOfCountries.push(getCountryFromAddress(waypoints[i].start_address));\n      listOfCountries.push(getCountryFromAddress(waypoints[i].end_address));\n    }\n    distance = distance / 1000;\n    time = time / 60 / 60;\n    const [tollPayment, companies, diets] = await Promise.all([\n      countTollPayments(waypoints),\n      getVehicles(),\n      countRoadDiets(waypoints, time, listOfCountries)\n    ]);\n    for (let i = 0; i < companies.length; i++) {\n      for (let k = 0; k < companies[i].vehicles.length; k++) {\n        for (let m = 0; m < tollPayment.length; m++) {\n          for (let l = 0; l < tollPayment[m].pricingPlans.length; l++) {\n            const isIt = [];\n            for (\n              let o = 0;\n              o < tollPayment[m].pricingPlans[l].requirePropertyValue.length;\n              o++\n            ) {\n              const currentRequireProperty =\n                tollPayment[m].pricingPlans[l].requirePropertyValue[o];\n              if (\n                currentRequireProperty.value != undefined &&\n                companies[i].vehicles[k][currentRequireProperty.name] ===\n                currentRequireProperty.value\n              ) {\n                isIt.push(true);\n              } else if (\n                currentRequireProperty.from != undefined &&\n                currentRequireProperty.to != undefined &&\n                companies[i].vehicles[k][currentRequireProperty.name] >=\n                currentRequireProperty.from &&\n                companies[i].vehicles[k][currentRequireProperty.name] <\n                currentRequireProperty.to\n              ) {\n                isIt.push(true);\n              }\n            }\n            if (\n              isIt.length ===\n              tollPayment[m].pricingPlans[l].requirePropertyValue.length &&\n              isIt.includes(true) &&\n              !isIt.includes(false)\n            ) {\n              if (companies[i].vehicles[k].toll === undefined) {\n                companies[i].vehicles[k].toll =\n                  tollPayment[m].pricingPlans[l].costsForWholeDistance;\n              } else {\n                companies[i].vehicles[k].toll +=\n                  tollPayment[m].pricingPlans[l].costsForWholeDistance;\n              }\n            }\n          }\n        }\n        companies[i].vehicles[k].fullCost +=\n          diets.sumDiets +\n          (Math.floor(diets.fullNumberOfDays) *\n            companies[i].vehicles[k].salary) /\n          30 +\n          (diets.fullNumberOfDays - Math.floor(diets.fullNumberOfDays) > 0.5\n            ? companies[i].vehicles[k].salary / 30\n            : companies[i].vehicles[k].salary / 60);\n        companies[i].vehicles[k] = {\n          _id: companies[i].vehicles[k]._id,\n          name: companies[i].vehicles[k].name,\n          fullCost:\n            (companies[i].vehicles[k].fullCost *\n              (100 + companies[i].vehicles[k].margin)) /\n            100\n        }\n        companies[i].vehicles[k].fullCost = Math.floor(companies[i].vehicles[k].fullCost * 100) / 100\n      }\n    }\n    res.send({ companies });\n\n    async function getVehicles() {\n      const [vehicles, formattedCompanies] = await Promise.all([\n        Vehicle.aggregate([\n          {\n            $match: {\n              \"dimensions.height\": {\n                $gt: height + palette.height\n              },\n              \"range.maxRange\": {\n                $gte: distance\n              },\n              countries: {\n                $all: listOfCountries\n              }\n            }\n          },\n          {\n            $addFields: {\n              palettes: {\n                oneRow: {\n                  $floor: {\n                    $divide: [\n                      {\n                        $multiply: [\"$dimensions.length\", \"$dimensions.width\"]\n                      },\n                      //rozmiary palety EUR-EPAL\n                      {\n                        $multiply: [palette.length, palette.width]\n                      }\n                    ]\n                  }\n                },\n                secondRow: {\n                  $cond: {\n                    if: {\n                      $gt: [\n                        {\n                          $subtract: [\n                            //odjęcie wysokości pojazdu od tego co zajmuje pierwszy rząd = wysokość która pozostałą\n                            \"$dimensions.height\",\n                            height + palette.height\n                          ]\n                        },\n                        height + palette.height\n                      ]\n                    },\n                    then: {\n                      $floor: {\n                        $divide: [\n                          {\n                            $multiply: [\n                              \"$dimensions.length\",\n                              \"$dimensions.width\"\n                            ]\n                          },\n                          //rozmiary palety EUR-EPAL\n                          {\n                            $multiply: [palette.length, palette.width]\n                          }\n                        ]\n                      }\n                    },\n                    else: 0\n                  }\n                }\n              },\n              costPerKm: {\n                $sum: [\n                  {\n                    $multiply: [\n                      {\n                        $divide: [1, \"$averageDistancePerMonth\"]\n                      },\n                      \"$monthCosts\"\n                    ]\n                  },\n                  {\n                    $divide: [\n                      {\n                        $divide: [\n                          {\n                            $multiply: [\"$valueOfTruck\", { $divide: [\"$deprecationPerYear\", 100] }]\n                          },\n                          12\n                        ]\n                      },\n                      \"$averageDistancePerMonth\"\n                    ]\n                  }\n                ]\n              }\n            }\n          }\n        ]),\n        operateOnCompanies()\n      ]);\n      async function operateOnCompanies() {\n        const companies = await Companies.find({});\n        const distinctVehiclesInCompanies = [];\n        for (let i = 0; i < companies.length; i++) {\n          let com = {\n            nameOfCompany: companies[i].nameOfCompany,\n            _id: companies[i]._id,\n            email: companies[i].email,\n            logo: companies[i].logo,\n            isVat: companies[i].isVat,\n            place: companies[i].place,\n            phone: companies[i].phone,\n            taxNumber: companies[i].taxNumber,\n            vehicles: []\n          };\n          for (let k = 0; k < companies[i].companyBases.length; k++) {\n            const diffDistance =\n              getDistanceFromLatLonInKm(\n                companies[i].companyBases[k].location,\n                points[0]\n              ) * 1.2;\n            const backDistance =\n              getDistanceFromLatLonInKm(\n                companies[i].companyBases[k].location,\n                points[points.length - 1]\n              ) * 1.2;\n            for (\n              let m = 0;\n              m < companies[i].companyBases[k].vehicles.length;\n              m++\n            ) {\n              let isInside = false;\n              for (let g = 0; g < com.vehicles.length; g++) {\n                if (\n                  com.vehicles[g]._id.toString() ===\n                  companies[i].companyBases[k].vehicles[m]._id.toString() &&\n                  com.vehicles[g].diffDistance > diffDistance\n                ) {\n                  com.vehicles[g] = {\n                    ...companies[i].companyBases[k].vehicles[m],\n                    diffDistance,\n                    backDistance,\n                    fullCost: 0,\n                    toll: 0\n                  };\n                  isInside = true;\n                }\n              }\n              if (!isInside) {\n                com.vehicles.push({\n                  ...companies[i].companyBases[k].vehicles[m],\n                  diffDistance,\n                  backDistance\n                });\n              }\n            }\n          }\n          distinctVehiclesInCompanies.push(com);\n        }\n        return distinctVehiclesInCompanies;\n      }\n\n      for (let i = 0; i < vehicles.length; i++) {\n        for (let k = 0; k < formattedCompanies.length; k++) {\n          loop1: for (\n            let m = 0;\n            m < formattedCompanies[k].vehicles.length;\n            m++\n          ) {\n            if (\n              vehicles[i]._id.toString() ===\n              formattedCompanies[k].vehicles[m]._id.toString()\n            ) {\n              formattedCompanies[k].vehicles[m] = {\n                ...formattedCompanies[k].vehicles[m],\n                costPerKm: vehicles[i].costPerKm,\n                palettes:\n                  vehicles[i].palettes.oneRow + vehicles[i].palettes.secondRow,\n                isInside: true\n              };\n              break loop1;\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < formattedCompanies.length; i++) {\n        let isNo = false\n        formattedCompanies[i].vehicles = formattedCompanies[i].vehicles.filter((value) => {\n          return value.isInside === true\n        })\n        if (formattedCompanies[i].vehicles.length === 0) {\n          formattedCompanies.splice(i, 1)\n          i--\n          isNo = true\n        }\n        if (!isNo) {\n          const filtered = vehicleFilterByPallet(formattedCompanies[i].vehicles, numberOfPallets, weight)\n          if (filtered) {\n            formattedCompanies[i].vehicles = filtered.map((value, index) => {\n              return value.truck\n            })\n            for (let k = 0; k < formattedCompanies[i].vehicles.length; k++) {\n              if (formattedCompanies[i].vehicles[k].diffDistance + formattedCompanies[i].vehicles[k].backDistance > formattedCompanies[i].vehicles[k].range.operationRange) {\n                formattedCompanies[i].vehicles[k] = {\n                  ...formattedCompanies[i].vehicles[k],\n                  fullCost:\n                    formattedCompanies[i].vehicles[k].diffDistance *\n                    formattedCompanies[i].vehicles[k].costPerKm +\n                    distance * formattedCompanies[i].vehicles[k].costPerKm +\n                    formattedCompanies[i].vehicles[k].backDistance * formattedCompanies[i].vehicles[k].costPerKm\n                }\n              } else {\n                formattedCompanies[i].vehicles[k] = {\n                  ...formattedCompanies[i].vehicles[k],\n                  fullCost:\n                    distance * formattedCompanies[i].vehicles[k].costPerKm\n                };\n              }\n\n            }\n          }\n        }\n\n      }\n      return formattedCompanies;\n    }\n\n  } else if (req.body.typeOfSearch === \"Dimensions\") {\n    const requireKeys = [\"volume\", \"points\", \"weight\"];\n    for (let i = 0; i < requireKeys.length; i++) {\n      let isInside = false;\n      for (let key in req.body) {\n        if (requireKeys[i] === key) {\n          isInside = true;\n        }\n      }\n      if (!isInside) {\n        return res.status(400).send({\n          msg: `Missing Parameter ${requireKeys[i]}`\n        });\n      }\n    }\n    const { points, volume, weight } = req.body;\n    if (!points || points.length < 2) {\n      return res.status(400).send({\n        err: \"There is no points\"\n      });\n    }\n    let road\n    try {\n      road = await googleMapsClient\n        .directions(createDistanceGoogleMapsRequest(points))\n        .asPromise();\n    } catch (err) {\n      return res.status(500).send({})\n    }\n\n\n    const waypoints = road.json.routes[0].legs;\n    let distance = 0;\n    let time = 0;\n    const listOfCountries = [];\n    for (let i = 0; i < waypoints.length; i++) {\n      distance += waypoints[i].distance.value;\n      time += waypoints[i].duration.value;\n      listOfCountries.push(getCountryFromAddress(waypoints[i].start_address));\n      listOfCountries.push(getCountryFromAddress(waypoints[i].end_address));\n    }\n    distance = distance / 1000;\n    time = time / 60 / 60;\n    const [tollPayment, companies, diets] = await Promise.all([\n      countTollPayments(waypoints),\n      getVehicles(),\n      countRoadDiets(waypoints, time, listOfCountries)\n    ]);\n\n    for (let i = 0; i < companies.length; i++) {\n      for (let k = 0; k < companies[i].vehicles.length; k++) {\n        for (let m = 0; m < tollPayment.length; m++) {\n          for (let l = 0; l < tollPayment[m].pricingPlans.length; l++) {\n            const isIt = [];\n            for (\n              let o = 0;\n              o < tollPayment[m].pricingPlans[l].requirePropertyValue.length;\n              o++\n            ) {\n              const currentRequireProperty =\n                tollPayment[m].pricingPlans[l].requirePropertyValue[o];\n\n              if (\n                currentRequireProperty.value != undefined &&\n                companies[i].vehicles[k][currentRequireProperty.name] ===\n                currentRequireProperty.value\n              ) {\n                isIt.push(true);\n              } else if (\n                currentRequireProperty.from != undefined &&\n                currentRequireProperty.to != undefined &&\n                companies[i].vehicles[k][currentRequireProperty.name] >=\n                currentRequireProperty.from &&\n                companies[i].vehicles[k][currentRequireProperty.name] <\n                currentRequireProperty.to\n              ) {\n                isIt.push(true);\n              }\n            }\n\n            if (\n              isIt.length ===\n              tollPayment[m].pricingPlans[l].requirePropertyValue.length &&\n              isIt.includes(true) &&\n              !isIt.includes(false)\n            ) {\n              if (companies[i].vehicles[k].toll === undefined) {\n                companies[i].vehicles[k].toll =\n                  tollPayment[m].pricingPlans[l].costsForWholeDistance;\n              } else {\n                companies[i].vehicles[k].toll +=\n                  tollPayment[m].pricingPlans[l].costsForWholeDistance;\n              }\n            }\n          }\n        }\n        companies[i].vehicles[k].fullCost +=\n          diets.sumDiets +\n          (Math.floor(diets.fullNumberOfDays) *\n            companies[i].vehicles[k].salary) /\n          30 +\n          (diets.fullNumberOfDays - Math.floor(diets.fullNumberOfDays) > 0.5\n            ? companies[i].vehicles[k].salary / 30\n            : companies[i].vehicles[k].salary / 60);\n        companies[i].vehicles[k] = {\n          _id: companies[i].vehicles[k]._id,\n          name: companies[i].vehicles[k].name,\n          fullCost:\n            (companies[i].vehicles[k].fullCost *\n              (100 + companies[i].vehicles[k].margin)) /\n            100\n        };\n        companies[i].vehicles[k].fullCost = Math.floor(companies[i].vehicles[k].fullCost * 100) / 100\n      }\n    }\n    res.send({ companies });\n\n    async function getVehicles() {\n      const [vehicles, formattedCompanies] = await Promise.all([\n        Vehicle.aggregate([\n          {\n            $match: {\n              \"range.maxRange\": {\n                $gte: distance\n              },\n              countries: {\n                $all: listOfCountries\n              }\n            }\n          },\n          {\n            $addFields: {\n              volume: {\n                $multiply: [\n                  \"$dimensions.height\",\n                  {\n                    $multiply: [\"$dimensions.width\", \"$dimensions.length\"]\n                  }\n                ]\n              },\n              costPerKm: {\n                $sum: [\n                  {\n                    $multiply: [\n                      {\n                        $divide: [1, \"$averageDistancePerMonth\"]\n                      },\n                      \"$monthCosts\"\n                    ]\n                  },\n                  {\n                    $divide: [\n                      {\n                        $divide: [\n                          {\n                            $multiply: [\"$valueOfTruck\", { $divide: [\"$deprecationPerYear\", 100] }]\n                          },\n                          12\n                        ]\n                      },\n                      \"$averageDistancePerMonth\"\n                    ]\n                  }\n                ]\n              },\n              toll: 0\n            }\n          }\n        ]),\n        operateOnCompanies()\n      ]);\n      async function operateOnCompanies() {\n        const companies = await Companies.find({});\n        const distinctVehiclesInCompanies = [];\n        for (let i = 0; i < companies.length; i++) {\n          let com = {\n            nameOfCompany: companies[i].nameOfCompany,\n            _id: companies[i]._id,\n            email: companies[i].email,\n            logo: companies[i].logo,\n            isVat: companies[i].isVat,\n            place: companies[i].place,\n            phone: companies[i].phone,\n            taxNumber: companies[i].taxNumber,\n            vehicles: [],\n          };\n          for (let k = 0; k < companies[i].companyBases.length; k++) {\n            const diffDistance =\n              getDistanceFromLatLonInKm(\n                companies[i].companyBases[k].location,\n                points[0]\n              ) * 1.2;\n            const backDistance =\n              getDistanceFromLatLonInKm(\n                companies[i].companyBases[k].location,\n                points[points.length - 1]\n              ) * 1.2;\n            for (\n              let m = 0;\n              m < companies[i].companyBases[k].vehicles.length;\n              m++\n            ) {\n              let isInside = false;\n              for (let g = 0; g < com.vehicles.length; g++) {\n                if (\n                  com.vehicles[g]._id.toString() ===\n                  companies[i].companyBases[k].vehicles[m]._id.toString() &&\n                  com.vehicles[g].diffDistance > diffDistance\n                ) {\n                  com.vehicles[g] = {\n                    ...companies[i].companyBases[k].vehicles[m],\n                    diffDistance,\n                    backDistance,\n                    fullCost: 0,\n                    toll: 0\n                  };\n                  isInside = true;\n                }\n              }\n              if (!isInside) {\n                com.vehicles.push({\n                  ...companies[i].companyBases[k].vehicles[m],\n                  diffDistance,\n                  backDistance\n                });\n              }\n            }\n          }\n          distinctVehiclesInCompanies.push(com);\n        }\n        return distinctVehiclesInCompanies;\n      }\n\n      for (let i = 0; i < vehicles.length; i++) {\n        for (let k = 0; k < formattedCompanies.length; k++) {\n          loop1: for (\n            let m = 0;\n            m < formattedCompanies[k].vehicles.length;\n            m++\n          ) {\n            if (\n              vehicles[i]._id.toString() ===\n              formattedCompanies[k].vehicles[m]._id.toString()\n            ) {\n              formattedCompanies[k].vehicles[m] = {\n                ...formattedCompanies[k].vehicles[m],\n                costPerKm: vehicles[i].costPerKm,\n                volume: vehicles[i].volume,\n                isInside: true\n              };\n              break loop1;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < formattedCompanies.length; i++) {\n        formattedCompanies[i].vehicles = formattedCompanies[i].vehicles.filter((value) => {\n          return value.isInside === true\n        })\n        const filtered = vehicleFilterByVolume(formattedCompanies[i].vehicles, volume, weight)\n        if (filtered) {\n          formattedCompanies[i].vehicles = filtered.map((value, index) => {\n            return value.truck\n          })\n          for (let k = 0; k < formattedCompanies[i].vehicles.length; k++) {\n            if (formattedCompanies[i].vehicles[k].diffDistance + formattedCompanies[i].vehicles[k].backDistance > formattedCompanies[i].vehicles[k].range.operationRange) {\n              formattedCompanies[i].vehicles[k] = {\n                ...formattedCompanies[i].vehicles[k],\n                fullCost:\n                  formattedCompanies[i].vehicles[k].diffDistance *\n                  formattedCompanies[i].vehicles[k].costPerKm +\n                  distance * formattedCompanies[i].vehicles[k].costPerKm +\n                  formattedCompanies[i].vehicles[k].backDistance * formattedCompanies[i].vehicles[k].costPerKm\n              }\n            } else {\n              formattedCompanies[i].vehicles[k] = {\n                ...formattedCompanies[i].vehicles[k],\n                fullCost:\n                  distance * formattedCompanies[i].vehicles[k].costPerKm\n              };\n            }\n          }\n        } else {\n          formattedCompanies.splice(i, 1)\n          i--\n        }\n      }\n      return formattedCompanies;\n    }\n  }\n}\n"],"file":"road.js"}