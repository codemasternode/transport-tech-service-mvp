{"version":3,"sources":["../../src/config/db.js"],"names":["URI","dbOptions","poolSize","useNewUrlParser","useUnifiedTopology","mongoose","connect","err","Error","console","log","data","Promise","all","Country","deleteMany","Vehicle","Company","CompanyBase","User","Palette","TollRoad","Diets","diets","ratesCallback","i","length","push","currency","map","call","e","rates","g","isIniside","status","base","dietValueInPLN","Math","ceil","PLN","dietValue","nightLimitValueInPLN","nightLimitValue","create","nearestCountry","nearestCountrySaved","savedPalettes","savedCountries","savedTollRoads","h","includes","countryCode","companies","findOne","PL","country","countries","distinctVehicles","k","companyBases","m","vehicles","isInside","name","savedVehicles","l"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;0BAEe,iBAAMA,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,SADO,GACK;AAChBC,cAAAA,QAAQ,EAAE,CADM;AAEhBC,cAAAA,eAAe,EAAE,IAFD;AAGhBC,cAAAA,kBAAkB,EAAE;AAHJ,aADL;;AAObC,iCAASC,OAAT,oCAAoDL,SAApD,EAA+D,UAAAM,GAAG,EAAI;AACpE,kBAAIA,GAAJ,EAAS;AACP,sBAAM,IAAIC,KAAJ,iDAAmDD,GAAnD,EAAN;AACD;;AACDE,cAAAA,OAAO,CAACC,GAAR;AACD,aALD;;AAPa;AAAA,mBAcM,wBAAS,CAC1B,wBAD0B,EACA;AAC1B,gCAF0B,EAEJ;AACtB,mCAH0B,EAGD;AACzB,oCAJ0B,EAIA;AAC1B,gCAL0B,EAKJ;AACtB,qCAN0B,CAAT,CAdN;;AAAA;AAcPC,YAAAA,IAdO;AAAA;AAAA,mBAuBPC,OAAO,CAACC,GAAR,CAAY,CAChBC,oBAAQC,UAAR,CAAmB,EAAnB,CADgB,EAEhBC,oBAAQD,UAAR,CAAmB,EAAnB,CAFgB,EAGhBE,oBAAQF,UAAR,CAAmB,EAAnB,CAHgB,EAIhBG,wBAAYH,UAAZ,CAAuB,EAAvB,CAJgB,EAKhBI,iBAAKJ,UAAL,CAAgB,EAAhB,CALgB,EAMhBK,qBAAQL,UAAR,CAAmB,EAAnB,CANgB,EAOhBM,sBAASN,UAAT,CAAoB,EAApB,CAPgB,EAQhBO,kBAAMP,UAAN,CAAiB,EAAjB,CARgB,CAAZ,CAvBO;;AAAA;AAkCPQ,YAAAA,KAlCO,GAkCCZ,IAAI,CAAC,CAAD,CAlCL;AAmCPa,YAAAA,aAnCO,GAmCS,EAnCT;;AAoCb,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,cAAAA,aAAa,CAACG,IAAd,CACE,6EACiDJ,KAAK,CAACE,CAAD,CAAL,CAASG,QAD1D,kBADF;AAKD;;AA1CY;AAAA;AAAA,mBA4CShB,OAAO,CAACC,GAAR,CAClBW,aAAa,CAACK,GAAd,CAAkB,UAAAC,IAAI;AAAA,qBAAIA,IAAI,SAAJ,CAAW,UAAAC,CAAC;AAAA,uBAAIA,CAAJ;AAAA,eAAZ,CAAJ;AAAA,aAAtB,CADkB,CA5CT;;AAAA;AA4CLC,YAAAA,KA5CK;;AA+CX,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACG,MAA1B,EAAkCO,CAAC,EAAnC,EAAuC;AACjCC,cAAAA,SADiC,GACrB,KADqB;;AAErC,mBAAST,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAAGO,KAAK,CAACN,MAA1B,EAAkCD,EAAC,EAAnC,EAAuC;AACrC,oBACEO,KAAK,CAACP,EAAD,CAAL,CAASU,MAAT,KAAoB,GAApB,IACAH,KAAK,CAACP,EAAD,CAAL,CAASd,IAAT,CAAcyB,IAAd,KAAuBb,KAAK,CAACU,CAAD,CAAL,CAASL,QAFlC,EAGE;AACAL,kBAAAA,KAAK,CAACU,CAAD,CAAL,CAASI,cAAT,GAA0BC,IAAI,CAACC,IAAL,CACxBP,KAAK,CAACP,EAAD,CAAL,CAASd,IAAT,CAAcqB,KAAd,CAAoBQ,GAApB,GAA0BjB,KAAK,CAACU,CAAD,CAAL,CAASQ,SADX,CAA1B;AAGAlB,kBAAAA,KAAK,CAACU,CAAD,CAAL,CAASS,oBAAT,GAAgCJ,IAAI,CAACC,IAAL,CAC9BP,KAAK,CAACP,EAAD,CAAL,CAASd,IAAT,CAAcqB,KAAd,CAAoBQ,GAApB,GAA0BjB,KAAK,CAACU,CAAD,CAAL,CAASU,eADL,CAAhC;AAGAT,kBAAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,kBAAI,CAACA,SAAL,EAAgB;AACdX,gBAAAA,KAAK,CAACU,CAAD,CAAL,CAASI,cAAT,GAA0B,CAA1B;AACAd,gBAAAA,KAAK,CAACU,CAAD,CAAL,CAASS,oBAAT,GAAgC,CAAhC;AACD;AACF;;AACDpB,8BAAMsB,MAAN,CAAarB,KAAb;;AApEW;AAAA;;AAAA;AAAA;AAAA;AAsEXd,YAAAA,OAAO,CAACC,GAAR;;AAtEW;AAwEPmC,YAAAA,cAxEO,GAwEU,CACrB,QADqB,EAErB,SAFqB,EAGrB,QAHqB,EAIrB,IAJqB,EAKrB,SALqB,EAMrB,aANqB,EAOrB,UAPqB,EAQrB,UARqB,EASrB,QATqB,CAxEV;AAmFPC,YAAAA,mBAnFO,GAmFe,EAnFf;AAAA;AAAA,mBAoFiBlC,OAAO,CAACC,GAAR,CAAY,CAACO,qBAAQwB,MAAR,CAAejC,IAAI,CAAC,CAAD,CAAnB,CAAD,CAAZ,CApFjB;;AAAA;AAAA;AAAA;AAoFNoC,YAAAA,aApFM;AAAA;AAAA,mBAqFkBnC,OAAO,CAACC,GAAR,CAAY,CAACC,oBAAQ8B,MAAR,CAAejC,IAAI,CAAC,CAAD,CAAnB,CAAD,CAAZ,CArFlB;;AAAA;AAAA;AAAA;AAqFNqC,YAAAA,cArFM;AAAA;AAAA,mBAsFkBpC,OAAO,CAACC,GAAR,CAAY,CAACQ,sBAASuB,MAAT,CAAgBjC,IAAI,CAAC,CAAD,CAApB,CAAD,CAAZ,CAtFlB;;AAAA;AAAA;AAAA;AAsFNsC,YAAAA,cAtFM;;AAuFb,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACtB,MAAnC,EAA2CwB,CAAC,EAA5C,EAAgD;AAC9C,kBAAIL,cAAc,CAACM,QAAf,CAAwBH,cAAc,CAACE,CAAD,CAAd,CAAkBE,WAA1C,CAAJ,EAA4D;AAC1DN,gBAAAA,mBAAmB,CAACnB,IAApB,CAAyBqB,cAAc,CAACE,CAAD,CAAd,CAAkBE,WAA3C;AACD;AACF,aA3FY,CA6Fb;;;AACMC,YAAAA,SA9FO,GA8FK1C,IAAI,CAAC,CAAD,CA9FT;AA+FJc,YAAAA,GA/FI,GA+FA,CA/FA;;AAAA;AAAA,kBA+FGA,GAAC,GAAG4B,SAAS,CAAC3B,MA/FjB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgGMZ,oBAAQwC,OAAR,CAAgB;AAAEF,cAAAA,WAAW,EAAE;AAAf,aAAhB,CAhGN;;AAAA;AAgGLG,YAAAA,EAhGK;AAiGXF,YAAAA,SAAS,CAAC5B,GAAD,CAAT,CAAa+B,OAAb,GAAuBD,EAAvB;AACAF,YAAAA,SAAS,CAAC5B,GAAD,CAAT,CAAagC,SAAb,GAAyBZ,cAAzB;AACMa,YAAAA,gBAnGK,GAmGc,EAnGd;;AAoGX,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BlC,MAA9C,EAAsDiC,CAAC,EAAvD,EAA2D;AACzD,mBAASE,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,CAA1B,EAA6BG,QAA7B,CAAsCpC,MAA1D,EAAkEmC,CAAC,EAAnE,EAAuE;AACjEE,gBAAAA,QADiE,GACtD,KADsD;;AAErE,qBAAS9B,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAAGyB,gBAAgB,CAAChC,MAArC,EAA6CO,EAAC,EAA9C,EAAkD;AAChD,sBAAIyB,gBAAgB,CAACzB,EAAD,CAAhB,CAAoB+B,IAApB,KAA6BX,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,CAA1B,EAA6BG,QAA7B,CAAsCD,CAAtC,EAAyCG,IAA1E,EAAgF;AAC9ED,oBAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AACD,oBAAI,CAACA,QAAL,EAAe;AACbL,kBAAAA,gBAAgB,CAAC/B,IAAjB,CAAsB0B,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,CAA1B,EAA6BG,QAA7B,CAAsCD,CAAtC,CAAtB;AACD;AACF;AACF;;AAhHU;AAAA,mBAiHiB7C,oBAAQ4B,MAAR,CAAec,gBAAf,CAjHjB;;AAAA;AAiHLO,YAAAA,aAjHK;;AAkHX,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACvC,MAAlC,EAA0CwC,CAAC,EAA3C,EAA+C;AAC7C,mBAASP,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAAGN,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BlC,MAA9C,EAAsDiC,EAAC,EAAvD,EAA2D;AACzD,qBAASE,EAAT,GAAa,CAAb,EAAgBA,EAAC,GAAGR,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,EAA1B,EAA6BG,QAA7B,CAAsCpC,MAA1D,EAAkEmC,EAAC,EAAnE,EAAuE;AACrE,sBAAII,aAAa,CAACC,CAAD,CAAb,CAAiBF,IAAjB,KAA0BX,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,EAA1B,EAA6BG,QAA7B,CAAsCD,EAAtC,EAAyCG,IAAvE,EAA6E;AAC3EX,oBAAAA,SAAS,CAAC5B,GAAD,CAAT,CAAamC,YAAb,CAA0BD,EAA1B,EAA6BG,QAA7B,CAAsCD,EAAtC,IAA2CI,aAAa,CAACC,CAAD,CAAxD;AACD;AACF;AACF;AACF;;AA1HU;AAAA,mBA2HLjD,oBAAQ2B,MAAR,CAAeS,SAAS,CAAC5B,GAAD,CAAxB,CA3HK;;AAAA;AA+FyBA,YAAAA,GAAC,EA/F1B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import mongoose from \"mongoose\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport uuid from \"uuid/v1\";\nimport { loadData } from \"../services/loadData\";\nimport Company from \"../models/company\";\nimport CompanyBase from \"../models/companyBase\";\nimport Country from \"../models/country\";\nimport Vehicle from \"../models/vehicle\";\nimport User from \"../models/user\";\nimport Palette from \"../models/palletes\";\nimport TollRoad from \"../models/tollRoads\";\nimport Diets from \"../models/diets\";\nimport Axios from \"axios\";\n\nexport default async URI => {\n  const dbOptions = {\n    poolSize: 4,\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  };\n\n  mongoose.connect(`mongodb://localhost:27017/tt111`, dbOptions, err => {\n    if (err) {\n      throw new Error(`Error while trying to connect MongoDB ${err}`);\n    }\n    console.log(`Connected to MongoDB`);\n  });\n\n  const data = await loadData([\n    \"default/countries.json\", //2\n    \"default/fuels.json\", // 3\n    \"default/palettes.json\", //5\n    \"default/tollRoads.json\", //6\n    \"default/diets.json\", //7\n    \"mockData/companies.json\"\n  ]);\n\n  await Promise.all([\n    Country.deleteMany({}),\n    Vehicle.deleteMany({}),\n    Company.deleteMany({}),\n    CompanyBase.deleteMany({}),\n    User.deleteMany({}),\n    Palette.deleteMany({}),\n    TollRoad.deleteMany({}),\n    Diets.deleteMany({})\n  ]);\n\n  const diets = data[4];\n  const ratesCallback = [];\n  for (let i = 0; i < diets.length; i++) {\n    ratesCallback.push(\n      Axios(\n        `https://api.exchangeratesapi.io/latest?base=${diets[i].currency}&symbols=PLN`\n      )\n    );\n  }\n  try {\n    const rates = await Promise.all(\n      ratesCallback.map(call => call.catch(e => e))\n    );\n    for (let g = 0; g < diets.length; g++) {\n      let isIniside = false;\n      for (let i = 0; i < rates.length; i++) {\n        if (\n          rates[i].status === 200 &&\n          rates[i].data.base === diets[g].currency\n        ) {\n          diets[g].dietValueInPLN = Math.ceil(\n            rates[i].data.rates.PLN * diets[g].dietValue\n          );\n          diets[g].nightLimitValueInPLN = Math.ceil(\n            rates[i].data.rates.PLN * diets[g].nightLimitValue\n          );\n          isIniside = true;\n        }\n      }\n      if (!isIniside) {\n        diets[g].dietValueInPLN = 0;\n        diets[g].nightLimitValueInPLN = 0;\n      }\n    }\n    Diets.create(diets);\n  } catch (err) {\n    console.log(err);\n  }\n  const nearestCountry = [\n    \"Poland\",\n    \"Germany\",\n    \"France\",\n    \"UK\",\n    \"Czechia\",\n    \"Switzerland\",\n    \"Slovenia\",\n    \"Slovakia\",\n    \"Latvia\"\n  ];\n  const nearestCountrySaved = [];\n  const [savedPalettes] = await Promise.all([Palette.create(data[2])]);\n  const [savedCountries] = await Promise.all([Country.create(data[0])]);\n  const [savedTollRoads] = await Promise.all([TollRoad.create(data[3])]);\n  for (let h = 0; h < savedCountries.length; h++) {\n    if (nearestCountry.includes(savedCountries[h].countryCode)) {\n      nearestCountrySaved.push(savedCountries[h].countryCode);\n    }\n  }\n\n  //const emissionsLevel = [\"EURO 2\", \"EURO 3\", \"EURO 4\", \"EURO 5\"];\n  const companies = data[5]\n  for (let i = 0; i < companies.length; i++) {\n    const PL = await Country.findOne({ countryCode: \"PL\" });\n    companies[i].country = PL;\n    companies[i].countries = nearestCountry;\n    const distinctVehicles = []\n    for (let k = 0; k < companies[i].companyBases.length; k++) {\n      for (let m = 0; m < companies[i].companyBases[k].vehicles.length; m++) {\n        let isInside = false\n        for (let g = 0; g < distinctVehicles.length; g++) {\n          if (distinctVehicles[g].name === companies[i].companyBases[k].vehicles[m].name) {\n            isInside = true\n          }\n        }\n        if (!isInside) {\n          distinctVehicles.push(companies[i].companyBases[k].vehicles[m])\n        }\n      }\n    }\n    const savedVehicles = await Vehicle.create(distinctVehicles)\n    for (let l = 0; l < savedVehicles.length; l++) {\n      for (let k = 0; k < companies[i].companyBases.length; k++) {\n        for (let m = 0; m < companies[i].companyBases[k].vehicles.length; m++) {\n          if (savedVehicles[l].name === companies[i].companyBases[k].vehicles[m].name) {\n            companies[i].companyBases[k].vehicles[m] = savedVehicles[l]\n          }\n        }\n      }\n    }\n    await Company.create(companies[i]);\n  }\n};\n"],"file":"db.js"}